<?php

/**
 * @file
 * @todo what does this file do?
 */

/**
 * Implements hook_form_alter().
 *
 * Alters the display of the node/add form for the Timesheets
 */
function cehs_ts_form_alter(&$form, &$form_state, $form_id) {
  $employee_id = 'empl id'; // field_get_items('user', $user, 'my_special_field');
  $employee_name = '@todo - set employee name';
  $supervisor = '@todo - get supervisor';
  /*
$r01 = $form['field_r01'] = array(
                          '#type' => 'textfield',
                          '#default_value' => 'r01',
                          '#size' => 1
                        );
*/
  // switch will let us use different alters for each of the three timesheet forms
  switch ($form_id) {
    case 'ts_biweekly_node_form':
     /*
 $form['field_employee_id'] = array(
        '#type' => 'textarea',
        '#language' => 'und',
        '#access' => FALSE,
        '#value' => $employee_id
      );
*/
/*
      $form['week1'] = array(
        '#markup' => t("<table class='myclass'>
                        <tr>
                          <th>Sunday</th>
                          <th>Monday</th>
                        </tr>
                        <tr>
                          <td>@r01</td>
                          <td>@r02</td>
                        </tr>
                      </table>", array(
                        '@r01' => 'foo',
                        '@r02' => 'r02',
                      ))
      );
*/
/*
      $form['field_r02'] = array(
          '#type' => 'textfield',
          '#default_value' => 'r02',
          '#size' => 4
      );
*/
      /* $form['actions']['submit']['#value'] = t('Save Me'); */
    // That's it. Stop checking form ids.
    break;
  }
}



/**
 * Implements hook_theme().
 *
 * @todo - Specify the use of a template file for each node add/edit form.
 */
function cehs_ts_theme() {
    return array(
        'ts_biweekly_node_form' => array(
            'template' => 'ts-biweekly-node-form',
            'render element' => 'form',
            'path' => drupal_get_path('module', 'cehs_ts').'/theme'
        ),
        'ts_monthly_node_form' => array(
            'template' => 'ts-monthly-node-form',
            'render element' => 'form',
            'path' => drupal_get_path('module', 'cehs_ts').'/theme'
        ),
        'ts_semimonthly_node_form' => array(
            'template' => 'ts-semimonthly-node-form',
            'render element' => 'form',
            'path' => drupal_get_path('module', 'cehs_ts').'/theme'
        ),
    );
}



/**
 * Rebuild the totals for each day using AJAX after a field is edited.
 */
/* function cehs_ts_totals($form, &$form_state) { */
  // Since the form builder is called after every AJAX request, we rebuild
  // the form based on $form_state.
/*   $num_checkboxes = !empty($form_state['values']['howmany_select']) ? $form_state['values']['howmany_select'] : 1; */
  
 /*
 $form['field_r01'] = array(
    '#type' => 'textfield',
    '#default_value' => 'r01',
    '#size' => 1
  );
*/

/*
  $form['howmany_select'] = array(
    '#title' => t('How many checkboxes do you want?'),
    '#type' => 'select',
    '#options' => array(1 => 1, 2 => 2, 3 => 3, 4 => 4),
    '#default_value' => $num_checkboxes,
    '#ajax' => array(
      'callback' => 'ajax_example_autocheckboxes_callback',
      'wrapper' => 'checkboxes-div',
      //'method' defaults to replaceWith, but valid values also include
      // append, prepend, before and after.
      // 'method' => 'replaceWith',
      // 'effect' defaults to none. Other valid values are 'fade' and 'slide'.
      // See ajax_example_autotextfields for an example of 'fade'.
      'effect' => 'slide',
      // 'speed' defaults to 'slow'. You can also use 'fast'
      // or a number of milliseconds for the animation to last.
      // 'speed' => 'slow',
      // Don't show any throbber...
      'progress' => array('type' => 'none'),
    ),
  );


  $form['checkboxes_fieldset'] = array(
    '#title' => t("Generated Checkboxes"),
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="checkboxes-div">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#description' => t('This is where we get automatically generated checkboxes'),
  );

  for ($i = 1; $i <= $num_checkboxes; $i++) {
    $form['checkboxes_fieldset']["checkbox$i"] = array(
      '#type' => 'checkbox',
      '#title' => "Checkbox $i",
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
*/

/*
  return $form;
}
*/

/**
 * Callback element needs only select the portion of the form to be updated.
 * Since #ajax['callback'] return can be HTML or a renderable array (or an
 * array of commands), we can just return a piece of the form.
 * See @link ajax_example_advanced.inc AJAX Advanced Commands for more details
 * on AJAX framework commands.
 *
 * @return renderable array (the checkboxes fieldset)
 */
/*
function cehs_ts_totals_callback($form, $form_state) {
  return $form['checkboxes_fieldset'];
}
*/